import connectAdvanced from '../components/connectAdvanced'
import shallowEqual from '../utils/shallowEqual'
import defaultMapDispatchToPropsFactories from './mapDispatchToProps'
import defaultMapStateToPropsFactories from './mapStateToProps'
import defaultMergePropsFactories from './mergeProps'
import defaultSelectorFactory from './selectorFactory'

/**
  connect是连接到connectAdvanced的入口。 它将它的参数变成兼容的选择器工厂，它具有签名：

     （dispatch，options）=>（nextState，nextOwnProps）=> nextFinalProps
  
   connect将它的参数传递给connectAdvanced作为选项，然后在
   每次连接组件实例被实例化或热重载时将它们传递给selectorFactory。

   selectorFactory从它的mapStateToProps，mapStateToPropsFactories，mapDispatchToProps，
   mapDispatchToPropsFactories，mergeProps，mergePropsFactories和纯粹的参数。中返回一个最终的props选择器，

   生成的最终props选择器每次都由Connect组件实例调用当它收到新的props或store state的时候。
 * **/

function match(arg, factories, name) {
  for (let i = factories.length - 1; i >= 0; i--) {
    const result = factories[i](arg)
    if (result) return result
  }

  return (dispatch, options) => {
    throw new Error(`Invalid value of type ${typeof arg} for ${name} argument when connecting component ${options.wrappedComponentName}.`)
  }
}

function strictEqual(a, b) { return a === b }

//带默认参数的createConnect构建'official'connect behavior， 使用不同的选项调用它会打开一些测试和可扩展性场景
export function createConnect({
  connectHOC = connectAdvanced,
  mapStateToPropsFactories = defaultMapStateToPropsFactories,
  mapDispatchToPropsFactories = defaultMapDispatchToPropsFactories,
  mergePropsFactories = defaultMergePropsFactories,
  selectorFactory = defaultSelectorFactory
} = {}) {
  return function connect(
    mapStateToProps,
    mapDispatchToProps,
    mergeProps,
    {
      pure = true,
      areStatesEqual = strictEqual,//function strictEqual(a, b) { return a === b }
      areOwnPropsEqual = shallowEqual,//判断两个值是否相等（包括是否为NAN，对象的遍历对比），浅对比
      areStatePropsEqual = shallowEqual,
      areMergedPropsEqual = shallowEqual,
      ...extraOptions
    } = {}
  ) {
    /**
     * match函数
     * 将connect前三参数分别传入mapStateToPropsFactories，mapDispatchToPropsFactories，mergePropsFactories中进行处理，
     * 如果有值，则返回结果
     * 都没有值，则报错
     * initMapStateToProps、initMapDispatchToProps、initMergeProps均为一个被处理过的函数
     * **/
    const initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps')
    const initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps')
    const initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps')

    return connectHOC(selectorFactory, {
      // used in error messages
      methodName: 'connect',

      // 用于从包装组件的displayName中计算Connect的displayName。
      getDisplayName: name => `Connect(${name})`,

      // 如果mapStateToProps是未定义的的，则Connect组件不会订阅存储状态更改
      shouldHandleStateChanges: Boolean(mapStateToProps),

      // 传递给selectorFactory
      //处理过的connect第1、2、3参数
      initMapStateToProps,
      initMapDispatchToProps,
      initMergeProps,
      //pure默认为true
      pure,
      //areStatesEqual为===比较，后三个为浅比较
      areStatesEqual,
      areOwnPropsEqual,
      areStatePropsEqual,
      areMergedPropsEqual,

      // 任何额外的选项参数都可以覆盖connect或advancedAdvanced的默认值
      ...extraOptions
    })
  }
}

export default createConnect()
