import { combineReducers } from 'redux';
import createSagaMiddleware from 'redux-saga/lib/internal/middleware';
import invariant from 'invariant';
import checkModel from './checkModel';
import prefixNamespace from './prefixNamespace';
import Plugin, { filterHooks } from './Plugin';
import createStore from './createStore';
import getSaga from './getSaga';
import getReducer from './getReducer';
import createPromiseMiddleware from './createPromiseMiddleware';
import {
  run as runSubscription,
  unlisten as unlistenSubscription,
} from './subscription';
import { noop } from './utils';

// Internal model to update global state when do unmodel
const dvaModel = {
  namespace: '@@dva',
  state: 0,
  reducers: {
    UPDATE(state) {
      return state + 1;
    },
  },
};

/**
 * Create dva-core instance.
 *
 * @param hooksAndOpts
 * @param createOpts
 */
export function create(hooksAndOpts = {}, createOpts = {}) {
  const { initialReducer, setupApp = noop } = createOpts;
  //实例插件
  const plugin = new Plugin();
  /**
   * filterHooks - 去除多余的属性
   * plugin.use - 把钩子放入对应的数组
   * **/
  plugin.use(filterHooks(hooksAndOpts));
  /**
   * prefixNamespace - 给reducer或effect加上namespace
   * 如果reducers为数组且不为空，只取第一个
   * **/
  const app = {
    _models: [prefixNamespace({ ...dvaModel })],
    _store: null,
    _plugin: plugin,
    use: plugin.use.bind(plugin),
    model,
    start,
  };
  return app;

  /**
   * Register model before app is started.
   *
   * @param m {Object} model to register
   */
  function model(m) {
    if (process.env.NODE_ENV !== 'production') {
      checkModel(m, app._models);
    }
    const prefixedModel = prefixNamespace({ ...m });
    app._models.push(prefixedModel);
    return prefixedModel;
  }

  /**
   * Inject model after app is started.
   *
   * @param createReducer
   * @param onError
   * @param unlisteners
   * @param m
   */
  function injectModel(createReducer, onError, unlisteners, m) {
    //调用app.model方法，将model插入app._models中
    m = model(m);

    const store = app._store;
    //迭代m.reducers
    store.asyncReducers[m.namespace] = getReducer(
      m.reducers,
      m.state,
      plugin._handleActions
    );
    //把store进行热替换
    store.replaceReducer(createReducer(store.asyncReducers));
    //如果存在effects，执行getSaga，并调用store.runSaga - sagaMiddleware.run
    if (m.effects) {
      store.runSaga(
        app._getSaga(m.effects, m, onError, plugin.get('onEffect'))
      );
    }
    //如果存在subscriptions，执行runSubscription，
    if (m.subscriptions) {
      unlisteners[m.namespace] = runSubscription(
        m.subscriptions,
        m,
        app,
        onError
      );
    }
  }

  /**
   * Unregister model.
   *
   * @param createReducer
   * @param reducers
   * @param unlisteners
   * @param namespace
   *
   * Unexpected key warn problem:
   * https://github.com/reactjs/redux/issues/1636
   */
  function unmodel(createReducer, reducers, unlisteners, namespace) {
    const store = app._store;

    // Delete reducers
    delete store.asyncReducers[namespace];
    delete reducers[namespace];
    store.replaceReducer(createReducer());
    store.dispatch({ type: '@@dva/UPDATE' });

    // Cancel effects
    store.dispatch({ type: `${namespace}/@@CANCEL_EFFECTS` });

    // Unlisten subscrioptions
    unlistenSubscription(unlisteners, namespace);

    // Delete model from app._models
    app._models = app._models.filter(model => model.namespace !== namespace);
  }

  /**
   * Start the app.
   *
   * @returns void
   */
  function start() {
    // Global error handler
    const onError = err => {
      if (err) {
        if (typeof err === 'string') err = new Error(err);
        err.preventDefault = () => {
          err._dontReject = true;
        };
        plugin.apply('onError', err => {
          throw new Error(err.stack || err);
        })(err, app._store.dispatch);
      }
    };
    //插入saga的中间件
    const sagaMiddleware = createSagaMiddleware();
    //对有effects属性的model将action中塞入 __dva_resolve,__dva_reject
    //利用promise的原理，方便在视图层 dispatch action 并处理回调
    const promiseMiddleware = createPromiseMiddleware(app);
    /**
     * getSaga函数
     * 给action里面的type加上命名空间
     * 定义了@@start／@@end的action，代表effect的开始／结束，通过take对应的type来执行同步操作
     * 定义了`${model.namespace}/@@CANCEL_EFFECTS`来取消effect
     * 将onEffect数组遍历包在effect外层,从右到左的顺序
     * **/
    app._getSaga = getSaga.bind(null);

    const sagas = [];
    const reducers = { ...initialReducer };
    for (const m of app._models) {
      //把所有的reducer迭代放入reducers里面
      reducers[m.namespace] = getReducer(
        m.reducers,
        m.state,
        plugin._handleActions
      );
       //把所有的effects迭代放入sagas里面
      if (m.effects)
        sagas.push(app._getSaga(m.effects, m, onError, plugin.get('onEffect')));
    }
    //封装 reducer ，进行reducer功能增强
    const reducerEnhancer = plugin.get('onReducer');
    const extraReducers = plugin.get('extraReducers');
    //判断extraReducers和业务中定义的reducer是否重复
    invariant(
      Object.keys(extraReducers).every(key => !(key in reducers)),
      `[app.start] extraReducers is conflict with other reducers, reducers list: ${Object.keys(
        reducers
      ).join(', ')}`
    );

    // 调用redux的createStore生成一个store，并塞入增强器和中间件
    const store = (app._store = createStore({
      // eslint-disable-line
      //createReducer 合成当前的reducer，并用reducerEnhancer对其进行加强
      reducers: createReducer(),
      initialState: hooksAndOpts.initialState || {},
      plugin,
      createOpts,
      sagaMiddleware,
      promiseMiddleware,
    }));

    // Extend store
    store.runSaga = sagaMiddleware.run;
    store.asyncReducers = {};

    // Execute listeners when state is changed
    const listeners = plugin.get('onStateChange');
    for (const listener of listeners) {
      //注册一个 state 发生变化时的回调函数。
      store.subscribe(() => {
        listener(store.getState());
      });
    }

    // Run sagas
    sagas.forEach(sagaMiddleware.run);

    /**
     * setupApp
     * 在这里触发dva中定义的setupApp，对history包裹一层
     * **/ 
    setupApp(app);

    // Run subscriptions
    const unlisteners = {};
    for (const model of this._models) {
      if (model.subscriptions) {
        //prefixedDispatch
        /**
         * runSubscription 函数
         * 触发model里面的subscriptions
         * @return  { funcs, nonFuncs }
         * funcs - subscriptions执行后返回的函数
         * nonFuncs - subscriptions执行后返回的非函数
         * **/
        unlisteners[model.namespace] = runSubscription(
          model.subscriptions,
          model,
          app,
          onError
        );
      }
    }
    /**
     * 改写model，unmodel方法，为初始化后，按需插入／解绑model
     * 
     * **/
    // Setup app.model and app.unmodel
    app.model = injectModel.bind(app, createReducer, onError, unlisteners);
    app.unmodel = unmodel.bind(app, createReducer, reducers, unlisteners);

    /**
     * Create global reducer for redux.
     *
     * @returns {Object}
     */
    function createReducer() {
      return reducerEnhancer(
        combineReducers({
          ...reducers,
          ...extraReducers,
          ...(app._store ? app._store.asyncReducers : {}),
        })
      );
    }
  }
}
