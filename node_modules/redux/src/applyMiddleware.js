import compose from './compose'

/**
  *创建一个store增强器，将中间件应用于Redux store的dispatch方法。 这对于各种任务很方便，例如以简洁的方式表示异步操作，或者记录每个操作的有效负载。
  *
  *请参阅`redux-thunk`包作为Redux中间件的示例。
  *
  *因为中间件可能是异步的，所以这应该是组合链中的第一个store增强器，最右边。
  *
  *请注意，每个中间件将被赋予`dispatch`和`getState`作为命名参数。
  *
  * @param {... Function}中间件要应用的中间件链。
  * @returns {Function}应用中间件的商店增强器。
 */
export default function applyMiddleware(...middlewares) {
  //其实它就是一个enhancer，在createStore函数中调用，参数为(createStore)(reducer, preloadedState)
  return (createStore) => (reducer, preloadedState, enhancer) => {
    const store = createStore(reducer, preloadedState, enhancer)
    let dispatch = store.dispatch
    let chain = []
    /**
     * ({ dispatch, getState }) => next => action => 
     * 写中间件的时候，第一层的store  - middlewareAPI
     * **/
    const middlewareAPI = {
      getState: store.getState,
      dispatch: (action) => dispatch(action)
    }
    chain = middlewares.map(middleware => middleware(middlewareAPI))
     /**
     * ({ dispatch, getState }) => next => action => 
     * 写中间件的时候，第二层的next  - store.dispatch
     * 第三层的action，其实是调用store.dispatch后返回的参数
     * **/
    dispatch = compose(...chain)(store.dispatch)

    return {
      ...store,
      dispatch
    }
  }
}
