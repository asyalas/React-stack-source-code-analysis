function bindActionCreator(actionCreator, dispatch) {
  return (...args) => dispatch(actionCreator(...args))
}
/**
 *返回一个对象，将其值为通过action creators转换为具有相同键的对象，但将每个对象都包装到“dispatch”调用中，以便可以直接调用它们。
 *这只是一个方便的方法，你可以自己调用`store.dispatch（MyActionCreators.doSomething（））`。
 *
 *为方便起见，您还可以传递一个函数作为第一个参数，并返回一个函数。
 *
 * @param {Function | Object} actionCreators 其值为动作创建者函数的对象。 
 *获得它的一个方便方法是使用ES6`import * as`语法。 您也可以传递一个函数。
 *
 * @param {Function}调度您的Redux store提供`dispatch`函数。
 *
 * @returns {Function | Object}模仿原始对象的对象，但是每个action creators都包含在`dispatch`调用中。 
 * 如果您将一个函数作为actionCreators传递，则返回值也将是一个单一函数。
 */
export default function bindActionCreators(actionCreators, dispatch) {
  //如果action为一个函数，则包裹dispatch，返回一个函数
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch)
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error(
      `bindActionCreators expected an object or a function, instead received ${actionCreators === null ? 'null' : typeof actionCreators}. ` +
      `Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`
    )
  }
  //遍历action，获取每一个参数，如果是函数，则用dispatch包裹，不是则直接赋值，最后返回一个被处理过的对象或者函数
  const keys = Object.keys(actionCreators)
  const boundActionCreators = {}
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    const actionCreator = actionCreators[key]
    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)
    }
  }
  return boundActionCreators
}
